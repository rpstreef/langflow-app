{"name":"TXT RAG","description":"Generate, Innovate, Communicate.","data":{"nodes":[{"id":"FAISS-hxaih","type":"genericNode","position":{"x":972.4827242521892,"y":1085.1852829254165},"data":{"type":"FAISS","node":{"template":{"documents":{"type":"Document","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"documents","display_name":"Documents","advanced":false,"dynamic":false,"info":"","title_case":true},"embedding":{"type":"Embeddings","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"embedding","display_name":"Embedding","advanced":false,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import List, Union\n\nfrom langchain.schema import BaseRetriever\nfrom langchain_community.vectorstores import VectorStore\nfrom langchain_community.vectorstores.faiss import FAISS\nfrom langflow import CustomComponent\nfrom langflow.field_typing import Document, Embeddings\n\n\nclass FAISSComponent(CustomComponent):\n    display_name = \"FAISS\"\n    description = \"Construct FAISS wrapper from raw documents.\"\n    documentation = \"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss\"\n\n    def build_config(self):\n        return {\n            \"documents\": {\"display_name\": \"Documents\"},\n            \"embedding\": {\"display_name\": \"Embedding\"},\n        }\n\n    def build(\n        self,\n        embedding: Embeddings,\n        documents: List[Document],\n    ) -> Union[VectorStore, FAISS, BaseRetriever]:\n        return FAISS.from_documents(documents=documents, embedding=embedding)\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Construct FAISS wrapper from raw documents.","base_classes":["VectorStore","FAISS","VectorStore","BaseRetriever"],"display_name":"FAISS","documentation":"https://python.langchain.com/docs/modules/data_connection/vectorstores/integrations/faiss","custom_fields":{"embedding":null,"documents":null},"output_types":["VectorStore","FAISS","BaseRetriever"],"field_formatters":{},"beta":true},"id":"FAISS-hxaih"},"selected":false,"width":384,"height":376,"positionAbsolute":{"x":972.4827242521892,"y":1085.1852829254165},"dragging":false},{"id":"Document-ctAAS","type":"genericNode","position":{"x":64,"y":182.25},"data":{"type":"Document","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Dict, List\n\nfrom langchain.docstore.document import Document\nfrom langchain.document_loaders.directory import DirectoryLoader\nfrom langflow import CustomComponent\n\n\nclass DirectoryLoaderComponent(CustomComponent):\n    display_name = \"DirectoryLoader\"\n    description = \"Load from a directory.\"\n\n    def build_config(self) -> Dict[str, Any]:\n        return {\n            \"glob\": {\"display_name\": \"Glob Pattern\", \"value\": \"**/*.txt\"},\n            \"load_hidden\": {\"display_name\": \"Load Hidden Files\", \"value\": False, \"advanced\": True},\n            \"max_concurrency\": {\"display_name\": \"Max Concurrency\", \"value\": 10, \"advanced\": True},\n            \"metadata\": {\"display_name\": \"Metadata\", \"value\": {}},\n            \"path\": {\"display_name\": \"Local Directory\"},\n            \"recursive\": {\"display_name\": \"Recursive\", \"value\": True, \"advanced\": True},\n            \"silent_errors\": {\"display_name\": \"Silent Errors\", \"value\": False, \"advanced\": True},\n            \"use_multithreading\": {\"display_name\": \"Use Multithreading\", \"value\": True, \"advanced\": True},\n        }\n\n    def build(\n        self,\n        glob: str,\n        path: str,\n        max_concurrency: int = 2,\n        load_hidden: bool = False,\n        recursive: bool = True,\n        silent_errors: bool = False,\n        use_multithreading: bool = True,\n    ) -> List[Document]:\n        return DirectoryLoader(\n            glob=glob,\n            path=path,\n            load_hidden=load_hidden,\n            max_concurrency=max_concurrency,\n            recursive=recursive,\n            silent_errors=silent_errors,\n            use_multithreading=use_multithreading,\n        ).load()\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"glob":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"**/*.txt","fileTypes":[],"file_path":"","password":false,"name":"glob","display_name":"Glob Pattern","advanced":false,"dynamic":false,"info":"","title_case":true},"load_hidden":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"load_hidden","display_name":"Load Hidden Files","advanced":true,"dynamic":false,"info":"","title_case":true},"max_concurrency":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":10,"fileTypes":[],"file_path":"","password":false,"name":"max_concurrency","display_name":"Max Concurrency","advanced":true,"dynamic":false,"info":"","title_case":true},"path":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"path","display_name":"Local Directory","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"./docs"},"recursive":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"recursive","display_name":"Recursive","advanced":true,"dynamic":false,"info":"","title_case":true},"silent_errors":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"silent_errors","display_name":"Silent Errors","advanced":true,"dynamic":false,"info":"","title_case":true},"use_multithreading":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"use_multithreading","display_name":"Use Multithreading","advanced":true,"dynamic":false,"info":"","title_case":true},"_type":"CustomComponent"},"description":"Load from a directory.","base_classes":["Document"],"display_name":"DirectoryLoader","documentation":"","custom_fields":{"glob":null,"path":null,"max_concurrency":null,"load_hidden":null,"recursive":null,"silent_errors":null,"use_multithreading":null},"output_types":["Document"],"field_formatters":{},"beta":true},"id":"Document-ctAAS"},"selected":false,"width":384,"height":467,"positionAbsolute":{"x":64,"y":182.25},"dragging":false},{"id":"OpenAIEmbeddings-lKF6F","type":"genericNode","position":{"x":79.09321867233939,"y":726.7340107068659},"data":{"type":"OpenAIEmbeddings","node":{"template":{"allowed_special":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":[],"fileTypes":[],"file_path":"","password":false,"name":"allowed_special","display_name":"Allowed Special","advanced":true,"dynamic":false,"info":"","title_case":true},"chunk_size":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":1000,"fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":true,"dynamic":false,"info":"","title_case":true},"client":{"type":"Any","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"client","display_name":"Client","advanced":true,"dynamic":false,"info":"","title_case":true},"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Any, Callable, Dict, List, Optional, Union\n\nfrom langchain_openai.embeddings.base import OpenAIEmbeddings\nfrom langflow import CustomComponent\nfrom langflow.field_typing import NestedDict\nfrom pydantic.v1.types import SecretStr\n\n\nclass OpenAIEmbeddingsComponent(CustomComponent):\n    display_name = \"OpenAIEmbeddings\"\n    description = \"OpenAI embedding models\"\n\n    def build_config(self):\n        return {\n            \"allowed_special\": {\n                \"display_name\": \"Allowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"default_headers\": {\n                \"display_name\": \"Default Headers\",\n                \"advanced\": True,\n                \"field_type\": \"dict\",\n            },\n            \"default_query\": {\n                \"display_name\": \"Default Query\",\n                \"advanced\": True,\n                \"field_type\": \"NestedDict\",\n            },\n            \"disallowed_special\": {\n                \"display_name\": \"Disallowed Special\",\n                \"advanced\": True,\n                \"field_type\": \"str\",\n                \"is_list\": True,\n            },\n            \"chunk_size\": {\"display_name\": \"Chunk Size\", \"advanced\": True},\n            \"client\": {\"display_name\": \"Client\", \"advanced\": True},\n            \"deployment\": {\"display_name\": \"Deployment\", \"advanced\": True},\n            \"embedding_ctx_length\": {\n                \"display_name\": \"Embedding Context Length\",\n                \"advanced\": True,\n            },\n            \"max_retries\": {\"display_name\": \"Max Retries\", \"advanced\": True},\n            \"model\": {\n                \"display_name\": \"Model\",\n                \"advanced\": False,\n                \"options\": [\"text-embedding-3-small\", \"text-embedding-3-large\", \"text-embedding-ada-002\"],\n            },\n            \"model_kwargs\": {\"display_name\": \"Model Kwargs\", \"advanced\": True},\n            \"openai_api_base\": {\"display_name\": \"OpenAI API Base\", \"password\": True, \"advanced\": True},\n            \"openai_api_key\": {\"display_name\": \"OpenAI API Key\", \"password\": True},\n            \"openai_api_type\": {\"display_name\": \"OpenAI API Type\", \"advanced\": True, \"password\": True},\n            \"openai_api_version\": {\n                \"display_name\": \"OpenAI API Version\",\n                \"advanced\": True,\n            },\n            \"openai_organization\": {\n                \"display_name\": \"OpenAI Organization\",\n                \"advanced\": True,\n            },\n            \"openai_proxy\": {\"display_name\": \"OpenAI Proxy\", \"advanced\": True},\n            \"request_timeout\": {\"display_name\": \"Request Timeout\", \"advanced\": True},\n            \"show_progress_bar\": {\n                \"display_name\": \"Show Progress Bar\",\n                \"advanced\": True,\n            },\n            \"skip_empty\": {\"display_name\": \"Skip Empty\", \"advanced\": True},\n            \"tiktoken_model_name\": {\"display_name\": \"TikToken Model Name\"},\n            \"tikToken_enable\": {\"display_name\": \"TikToken Enable\", \"advanced\": True},\n        }\n\n    def build(\n        self,\n        default_headers: Optional[Dict[str, str]] = None,\n        default_query: Optional[NestedDict] = {},\n        allowed_special: List[str] = [],\n        disallowed_special: List[str] = [\"all\"],\n        chunk_size: int = 1000,\n        client: Optional[Any] = None,\n        deployment: str = \"text-embedding-3-small\",\n        embedding_ctx_length: int = 8191,\n        max_retries: int = 6,\n        model: str = \"text-embedding-3-small\",\n        model_kwargs: NestedDict = {},\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = \"\",\n        openai_api_type: Optional[str] = None,\n        openai_api_version: Optional[str] = None,\n        openai_organization: Optional[str] = None,\n        openai_proxy: Optional[str] = None,\n        request_timeout: Optional[float] = None,\n        show_progress_bar: bool = False,\n        skip_empty: bool = False,\n        tiktoken_enable: bool = True,\n        tiktoken_model_name: Optional[str] = None,\n    ) -> Union[OpenAIEmbeddings, Callable]:\n        # This is to avoid errors with Vector Stores (e.g Chroma)\n        if disallowed_special == [\"all\"]:\n            disallowed_special = \"all\"  # type: ignore\n\n        api_key = SecretStr(openai_api_key) if openai_api_key else None\n\n        return OpenAIEmbeddings(\n            tiktoken_enabled=tiktoken_enable,\n            default_headers=default_headers,\n            default_query=default_query,\n            allowed_special=set(allowed_special),\n            disallowed_special=\"all\",\n            chunk_size=chunk_size,\n            client=client,\n            deployment=deployment,\n            embedding_ctx_length=embedding_ctx_length,\n            max_retries=max_retries,\n            model=model,\n            model_kwargs=model_kwargs,\n            base_url=openai_api_base,\n            api_key=api_key,\n            openai_api_type=openai_api_type,\n            api_version=openai_api_version,\n            organization=openai_organization,\n            openai_proxy=openai_proxy,\n            timeout=request_timeout,\n            show_progress_bar=show_progress_bar,\n            skip_empty=skip_empty,\n            tiktoken_model_name=tiktoken_model_name,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"default_headers":{"type":"dict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"default_headers","display_name":"Default Headers","advanced":true,"dynamic":false,"info":"","title_case":true},"default_query":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"default_query","display_name":"Default Query","advanced":true,"dynamic":false,"info":"","title_case":true},"deployment":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"text-embedding-3-small","fileTypes":[],"file_path":"","password":false,"name":"deployment","display_name":"Deployment","advanced":true,"dynamic":false,"info":"","title_case":true},"disallowed_special":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":["all"],"fileTypes":[],"file_path":"","password":false,"name":"disallowed_special","display_name":"Disallowed Special","advanced":true,"dynamic":false,"info":"","title_case":true},"embedding_ctx_length":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":8191,"fileTypes":[],"file_path":"","password":false,"name":"embedding_ctx_length","display_name":"Embedding Context Length","advanced":true,"dynamic":false,"info":"","title_case":true},"max_retries":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":6,"fileTypes":[],"file_path":"","password":false,"name":"max_retries","display_name":"Max Retries","advanced":true,"dynamic":false,"info":"","title_case":true},"model":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"text-embedding-3-small","fileTypes":[],"file_path":"","password":false,"options":["text-embedding-3-small","text-embedding-3-large","text-embedding-ada-002"],"name":"model","display_name":"Model","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"NestedDict","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":true,"dynamic":false,"info":"","title_case":true,"value":""},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_type":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_type","display_name":"OpenAI API Type","advanced":true,"dynamic":false,"info":"","title_case":true,"value":""},"openai_api_version":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_version","display_name":"OpenAI API Version","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_organization":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_organization","display_name":"OpenAI Organization","advanced":true,"dynamic":false,"info":"","title_case":true},"openai_proxy":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_proxy","display_name":"OpenAI Proxy","advanced":true,"dynamic":false,"info":"","title_case":true},"request_timeout":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"request_timeout","display_name":"Request Timeout","advanced":true,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"show_progress_bar":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"show_progress_bar","display_name":"Show Progress Bar","advanced":true,"dynamic":false,"info":"","title_case":true},"skip_empty":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":false,"fileTypes":[],"file_path":"","password":false,"name":"skip_empty","display_name":"Skip Empty","advanced":true,"dynamic":false,"info":"","title_case":true},"tiktoken_enable":{"type":"bool","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"tiktoken_enable","advanced":false,"dynamic":false,"info":"","title_case":true},"tiktoken_model_name":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"tiktoken_model_name","display_name":"TikToken Model Name","advanced":false,"dynamic":false,"info":"","title_case":true,"value":"gpt-3.5-turbo"},"_type":"CustomComponent"},"description":"OpenAI embedding models","base_classes":["Embeddings","OpenAIEmbeddings","Callable"],"display_name":"OpenAIEmbeddings","documentation":"","custom_fields":{"default_headers":null,"default_query":null,"allowed_special":null,"disallowed_special":null,"chunk_size":null,"client":null,"deployment":null,"embedding_ctx_length":null,"max_retries":null,"model":null,"model_kwargs":null,"openai_api_base":null,"openai_api_key":null,"openai_api_type":null,"openai_api_version":null,"openai_organization":null,"openai_proxy":null,"request_timeout":null,"show_progress_bar":null,"skip_empty":null,"tiktoken_enable":null,"tiktoken_model_name":null},"output_types":["OpenAIEmbeddings","Callable"],"field_formatters":{},"beta":true},"id":"OpenAIEmbeddings-lKF6F"},"selected":false,"width":384,"height":633,"positionAbsolute":{"x":79.09321867233939,"y":726.7340107068659},"dragging":false},{"id":"ConversationalRetrievalChain-v12Mv","type":"genericNode","position":{"x":1951.4648938400042,"y":1022.3166874084204},"data":{"type":"ConversationalRetrievalChain","node":{"template":{"callbacks":{"type":"Callbacks","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"callbacks","advanced":false,"dynamic":false,"info":"","title_case":true},"condense_question_llm":{"type":"BaseLanguageModel","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"condense_question_llm","advanced":false,"dynamic":false,"info":"","title_case":true},"condense_question_prompt":{"type":"BasePromptTemplate","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":{"name":null,"input_variables":["chat_history","question"],"input_types":{},"output_parser":null,"partial_variables":{},"metadata":null,"tags":null,"template":"Given the following conversation and a follow up question, rephrase the follow up question to be a standalone question, in its original language.\n\nChat History:\n{chat_history}\nFollow Up Input: {question}\nStandalone question:","template_format":"f-string","validate_template":false},"fileTypes":[],"password":false,"name":"condense_question_prompt","advanced":false,"dynamic":false,"info":"","title_case":true},"llm":{"type":"BaseLanguageModel","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"llm","advanced":false,"dynamic":false,"info":"","title_case":true},"memory":{"type":"BaseChatMemory","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"memory","advanced":false,"dynamic":false,"info":"","title_case":true},"retriever":{"type":"BaseRetriever","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"retriever","advanced":false,"dynamic":false,"info":"","title_case":true},"chain_type":{"type":"str","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"stuff","fileTypes":[],"file_path":"","password":false,"options":["stuff","map_reduce","map_rerank","refine"],"name":"chain_type","advanced":false,"dynamic":false,"info":"","title_case":true},"combine_docs_chain_kwargs":{"type":"dict","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"fileTypes":[],"password":false,"name":"combine_docs_chain_kwargs","advanced":false,"dynamic":false,"info":"","title_case":true},"return_source_documents":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":true,"fileTypes":[],"file_path":"","password":false,"name":"return_source_documents","display_name":"Return source documents","advanced":true,"dynamic":false,"info":"","title_case":true},"verbose":{"type":"bool","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":false,"fileTypes":[],"password":false,"name":"verbose","advanced":true,"dynamic":false,"info":"","title_case":true},"_type":"ConversationalRetrievalChain"},"description":"Convenience method to load chain from LLM and retriever.","base_classes":["BaseConversationalRetrievalChain","ConversationalRetrievalChain","Chain","Callable"],"display_name":"ConversationalRetrievalChain","documentation":"https://python.langchain.com/docs/modules/chains/popular/chat_vector_db","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"ConversationalRetrievalChain-v12Mv"},"selected":false,"width":384,"height":448,"dragging":false,"positionAbsolute":{"x":1951.4648938400042,"y":1022.3166874084204}},{"id":"ChatOpenAI-Q6T3O","type":"genericNode","position":{"x":1412.1254511479826,"y":259.39233629732894},"data":{"type":"ChatOpenAI","node":{"template":{"code":{"type":"code","required":true,"placeholder":"","list":false,"show":true,"multiline":true,"value":"from typing import Optional, Union\n\nfrom langchain.llms import BaseLLM\nfrom langchain_community.chat_models.openai import ChatOpenAI\n\nfrom langflow import CustomComponent\nfrom langflow.field_typing import BaseLanguageModel, NestedDict\n\n\nclass ChatOpenAIComponent(CustomComponent):\n    display_name = \"ChatOpenAI\"\n    description = \"`OpenAI` Chat large language models API.\"\n\n    def build_config(self):\n        return {\n            \"max_tokens\": {\n                \"display_name\": \"Max Tokens\",\n                \"field_type\": \"int\",\n                \"advanced\": False,\n                \"required\": False,\n            },\n            \"model_kwargs\": {\n                \"display_name\": \"Model Kwargs\",\n                \"field_type\": \"NestedDict\",\n                \"advanced\": True,\n                \"required\": False,\n            },\n            \"model_name\": {\n                \"display_name\": \"Model Name\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"options\": [\n                    \"gpt-4-turbo-preview\",\n                    \"gpt-4-0125-preview\",\n                    \"gpt-4-1106-preview\",\n                    \"gpt-4-vision-preview\",\n                    \"gpt-3.5-turbo-0125\",\n                    \"gpt-3.5-turbo-1106\",\n                ],\n            },\n            \"openai_api_base\": {\n                \"display_name\": \"OpenAI API Base\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"info\": (\n                    \"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\\n\\n\"\n                    \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\"\n                ),\n            },\n            \"openai_api_key\": {\n                \"display_name\": \"OpenAI API Key\",\n                \"field_type\": \"str\",\n                \"advanced\": False,\n                \"required\": False,\n                \"password\": True,\n            },\n            \"temperature\": {\n                \"display_name\": \"Temperature\",\n                \"field_type\": \"float\",\n                \"advanced\": False,\n                \"required\": False,\n                \"value\": 0.7,\n            },\n        }\n\n    def build(\n        self,\n        max_tokens: Optional[int] = 256,\n        model_kwargs: NestedDict = {},\n        model_name: str = \"gpt-4-1106-preview\",\n        openai_api_base: Optional[str] = None,\n        openai_api_key: Optional[str] = None,\n        temperature: float = 0.7,\n    ) -> Union[BaseLanguageModel, BaseLLM]:\n        if not openai_api_base:\n            openai_api_base = \"https://api.openai.com/v1\"\n        return ChatOpenAI(\n            max_tokens=max_tokens,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=openai_api_key,\n            temperature=temperature,\n        )\n","fileTypes":[],"file_path":"","password":false,"name":"code","advanced":false,"dynamic":true,"info":"","title_case":true},"max_tokens":{"type":"int","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":256,"fileTypes":[],"file_path":"","password":false,"name":"max_tokens","display_name":"Max Tokens","advanced":false,"dynamic":false,"info":"","title_case":true},"model_kwargs":{"type":"NestedDict","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":{},"fileTypes":[],"file_path":"","password":false,"name":"model_kwargs","display_name":"Model Kwargs","advanced":true,"dynamic":false,"info":"","title_case":true},"model_name":{"type":"str","required":false,"placeholder":"","list":true,"show":true,"multiline":false,"value":"gpt-4-1106-preview","fileTypes":[],"file_path":"","password":false,"options":["gpt-4-turbo-preview","gpt-4-0125-preview","gpt-4-1106-preview","gpt-4-vision-preview","gpt-3.5-turbo-0125","gpt-3.5-turbo-1106"],"name":"model_name","display_name":"Model Name","advanced":false,"dynamic":false,"info":"","title_case":true},"openai_api_base":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"openai_api_base","display_name":"OpenAI API Base","advanced":false,"dynamic":false,"info":"The base URL of the OpenAI API. Defaults to https://api.openai.com/v1.\n\nYou can change this to use other APIs like JinaChat, LocalAI and Prem.","title_case":true},"openai_api_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"dynamic":false,"info":"","title_case":true,"value":""},"temperature":{"type":"float","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"0.9","fileTypes":[],"file_path":"","password":false,"name":"temperature","display_name":"Temperature","advanced":false,"dynamic":false,"info":"","rangeSpec":{"min":-1,"max":1,"step":0.1},"title_case":true},"_type":"CustomComponent"},"description":"`OpenAI` Chat large language models API.","base_classes":["BaseLanguageModel","BaseLanguageModel","BaseLLM"],"display_name":"ChatOpenAI","documentation":"","custom_fields":{"max_tokens":null,"model_kwargs":null,"model_name":null,"openai_api_base":null,"openai_api_key":null,"temperature":null},"output_types":["BaseLanguageModel","BaseLLM"],"field_formatters":{},"beta":true},"id":"ChatOpenAI-Q6T3O"},"selected":false,"width":384,"height":728,"positionAbsolute":{"x":1412.1254511479826,"y":259.39233629732894},"dragging":false},{"id":"ConversationBufferMemory-iDEqr","type":"genericNode","position":{"x":984.5030141622647,"y":459.78192903784804},"data":{"type":"ConversationBufferMemory","node":{"template":{"chat_memory":{"type":"BaseChatMessageHistory","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"password":false,"name":"chat_memory","advanced":false,"dynamic":false,"info":"","title_case":true},"ai_prefix":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"AI","fileTypes":[],"password":false,"name":"ai_prefix","advanced":false,"dynamic":false,"info":"","title_case":true},"human_prefix":{"type":"str","required":false,"placeholder":"","list":false,"show":false,"multiline":false,"value":"Human","fileTypes":[],"password":false,"name":"human_prefix","advanced":false,"dynamic":false,"info":"","title_case":true},"input_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"input_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Input when more than one variable is available.","title_case":true},"memory_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"chat_history","fileTypes":[],"password":false,"name":"memory_key","advanced":false,"dynamic":false,"info":"","title_case":true},"output_key":{"type":"str","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"output_key","advanced":false,"dynamic":false,"info":"The variable to be used as Chat Output (e.g. answer in a ConversationalRetrievalChain)","title_case":true},"return_messages":{"type":"bool","required":false,"placeholder":"","list":false,"show":true,"multiline":false,"fileTypes":[],"file_path":"","password":false,"name":"return_messages","advanced":false,"dynamic":false,"info":"","title_case":true,"value":true},"_type":"ConversationBufferMemory"},"description":"Buffer for storing conversation memory.","base_classes":["BaseMemory","ConversationBufferMemory","BaseChatMemory"],"display_name":"ConversationBufferMemory","documentation":"https://python.langchain.com/docs/modules/memory/how_to/buffer","custom_fields":{},"output_types":[],"field_formatters":{},"beta":false},"id":"ConversationBufferMemory-iDEqr"},"selected":false,"width":384,"height":600,"positionAbsolute":{"x":984.5030141622647,"y":459.78192903784804},"dragging":false},{"id":"CharacterTextSplitter-N3BeT","type":"genericNode","position":{"x":531.0601533591508,"y":610.16054067599},"data":{"type":"CharacterTextSplitter","node":{"template":{"documents":{"type":"Document","required":true,"placeholder":"","list":true,"show":true,"multiline":false,"value":"","fileTypes":[],"file_path":"","password":false,"name":"documents","advanced":false,"dynamic":false,"info":"","title_case":true},"chunk_overlap":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":200,"fileTypes":[],"file_path":"","password":false,"name":"chunk_overlap","display_name":"Chunk Overlap","advanced":false,"dynamic":false,"info":"","title_case":true},"chunk_size":{"type":"int","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":1000,"fileTypes":[],"file_path":"","password":false,"name":"chunk_size","display_name":"Chunk Size","advanced":false,"dynamic":false,"info":"","title_case":true},"separator":{"type":"str","required":true,"placeholder":"","list":false,"show":true,"multiline":false,"value":"\\n","fileTypes":[],"file_path":"","password":false,"name":"separator","display_name":"Separator","advanced":false,"dynamic":false,"info":"","title_case":true},"_type":"CharacterTextSplitter"},"description":"Splitting text that looks at characters.","base_classes":["Document"],"display_name":"CharacterTextSplitter","documentation":"https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/character_text_splitter","custom_fields":{},"output_types":["Document"],"field_formatters":{},"beta":false},"id":"CharacterTextSplitter-N3BeT"},"selected":false,"width":384,"height":507,"positionAbsolute":{"x":531.0601533591508,"y":610.16054067599},"dragging":false}],"edges":[{"source":"OpenAIEmbeddings-lKF6F","sourceHandle":"{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lKF6Fœ}","target":"FAISS-hxaih","targetHandle":"{œfieldNameœ:œembeddingœ,œidœ:œFAISS-hxaihœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}","data":{"targetHandle":{"fieldName":"embedding","id":"FAISS-hxaih","inputTypes":null,"type":"Embeddings"},"sourceHandle":{"baseClasses":["Embeddings","OpenAIEmbeddings","Callable"],"dataType":"OpenAIEmbeddings","id":"OpenAIEmbeddings-lKF6F"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-OpenAIEmbeddings-lKF6F{œbaseClassesœ:[œEmbeddingsœ,œOpenAIEmbeddingsœ,œCallableœ],œdataTypeœ:œOpenAIEmbeddingsœ,œidœ:œOpenAIEmbeddings-lKF6Fœ}-FAISS-hxaih{œfieldNameœ:œembeddingœ,œidœ:œFAISS-hxaihœ,œinputTypesœ:null,œtypeœ:œEmbeddingsœ}"},{"source":"ChatOpenAI-Q6T3O","sourceHandle":"{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Q6T3Oœ}","target":"ConversationalRetrievalChain-v12Mv","targetHandle":"{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}","data":{"targetHandle":{"fieldName":"llm","id":"ConversationalRetrievalChain-v12Mv","inputTypes":null,"type":"BaseLanguageModel"},"sourceHandle":{"baseClasses":["BaseLanguageModel","BaseLanguageModel","BaseLLM"],"dataType":"ChatOpenAI","id":"ChatOpenAI-Q6T3O"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-ChatOpenAI-Q6T3O{œbaseClassesœ:[œBaseLanguageModelœ,œBaseLanguageModelœ,œBaseLLMœ],œdataTypeœ:œChatOpenAIœ,œidœ:œChatOpenAI-Q6T3Oœ}-ConversationalRetrievalChain-v12Mv{œfieldNameœ:œllmœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseLanguageModelœ}"},{"source":"ConversationBufferMemory-iDEqr","sourceHandle":"{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-iDEqrœ}","target":"ConversationalRetrievalChain-v12Mv","targetHandle":"{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseChatMemoryœ}","data":{"targetHandle":{"fieldName":"memory","id":"ConversationalRetrievalChain-v12Mv","inputTypes":null,"type":"BaseChatMemory"},"sourceHandle":{"baseClasses":["BaseMemory","ConversationBufferMemory","BaseChatMemory"],"dataType":"ConversationBufferMemory","id":"ConversationBufferMemory-iDEqr"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-ConversationBufferMemory-iDEqr{œbaseClassesœ:[œBaseMemoryœ,œConversationBufferMemoryœ,œBaseChatMemoryœ],œdataTypeœ:œConversationBufferMemoryœ,œidœ:œConversationBufferMemory-iDEqrœ}-ConversationalRetrievalChain-v12Mv{œfieldNameœ:œmemoryœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseChatMemoryœ}"},{"source":"FAISS-hxaih","sourceHandle":"{œbaseClassesœ:[œVectorStoreœ,œFAISSœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-hxaihœ}","target":"ConversationalRetrievalChain-v12Mv","targetHandle":"{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}","data":{"targetHandle":{"fieldName":"retriever","id":"ConversationalRetrievalChain-v12Mv","inputTypes":null,"type":"BaseRetriever"},"sourceHandle":{"baseClasses":["VectorStore","FAISS","VectorStore","BaseRetriever"],"dataType":"FAISS","id":"FAISS-hxaih"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-FAISS-hxaih{œbaseClassesœ:[œVectorStoreœ,œFAISSœ,œVectorStoreœ,œBaseRetrieverœ],œdataTypeœ:œFAISSœ,œidœ:œFAISS-hxaihœ}-ConversationalRetrievalChain-v12Mv{œfieldNameœ:œretrieverœ,œidœ:œConversationalRetrievalChain-v12Mvœ,œinputTypesœ:null,œtypeœ:œBaseRetrieverœ}"},{"source":"Document-ctAAS","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-ctAASœ}","target":"CharacterTextSplitter-N3BeT","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-N3BeTœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"CharacterTextSplitter-N3BeT","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"Document","id":"Document-ctAAS"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-Document-ctAAS{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œDocumentœ,œidœ:œDocument-ctAASœ}-CharacterTextSplitter-N3BeT{œfieldNameœ:œdocumentsœ,œidœ:œCharacterTextSplitter-N3BeTœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"},{"source":"CharacterTextSplitter-N3BeT","sourceHandle":"{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-N3BeTœ}","target":"FAISS-hxaih","targetHandle":"{œfieldNameœ:œdocumentsœ,œidœ:œFAISS-hxaihœ,œinputTypesœ:null,œtypeœ:œDocumentœ}","data":{"targetHandle":{"fieldName":"documents","id":"FAISS-hxaih","inputTypes":null,"type":"Document"},"sourceHandle":{"baseClasses":["Document"],"dataType":"CharacterTextSplitter","id":"CharacterTextSplitter-N3BeT"}},"style":{"stroke":"#555"},"className":"stroke-foreground  stroke-connection","animated":false,"id":"reactflow__edge-CharacterTextSplitter-N3BeT{œbaseClassesœ:[œDocumentœ],œdataTypeœ:œCharacterTextSplitterœ,œidœ:œCharacterTextSplitter-N3BeTœ}-FAISS-hxaih{œfieldNameœ:œdocumentsœ,œidœ:œFAISS-hxaihœ,œinputTypesœ:null,œtypeœ:œDocumentœ}"}],"viewport":{"x":127.13710738847169,"y":-39.71008869495222,"zoom":0.5140569133280362}},"is_component":false,"updated_at":"2024-06-07T03:56:49.454488","folder":null,"id":"7c298cf7-e72a-4506-908b-ebf726fb52cb","user_id":"ede21740-df61-4603-acbf-172e4dca2caa"}